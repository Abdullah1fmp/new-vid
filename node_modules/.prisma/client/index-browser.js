
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.17.0
 * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
 */
Prisma.prismaVersion = {
  client: "5.17.0",
  engine: "393aa359c9ad4a4bb28630fb5613f9c281cde053"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clerk_id: 'clerk_id',
  email: 'email',
  first_name: 'first_name',
  last_name: 'last_name',
  dob: 'dob',
  city: 'city',
  state: 'state',
  country: 'country',
  phone_number: 'phone_number',
  gender: 'gender',
  preferences: 'preferences',
  roles: 'roles',
  status: 'status',
  user_group_id: 'user_group_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  thumbnail: 'thumbnail',
  intro_video: 'intro_video',
  access_by_user_group_id: 'access_by_user_group_id',
  price: 'price',
  avg_rating: 'avg_rating',
  author_id: 'author_id',
  difficulty: 'difficulty',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_groupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Course_to_categoryScalarFieldEnum = {
  id: 'id',
  course_id: 'course_id',
  category_id: 'category_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChapterScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  position: 'position',
  course_id: 'course_id',
  status: 'status',
  is_free: 'is_free',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  position: 'position',
  type: 'type',
  status: 'status',
  chapter_id: 'chapter_id',
  video_url: 'video_url',
  document_url: 'document_url',
  is_downloadable: 'is_downloadable',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  lesson_id: 'lesson_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  position: 'position',
  answer_type: 'answer_type',
  quiz_id: 'quiz_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OptionScalarFieldEnum = {
  id: 'id',
  question_id: 'question_id',
  text: 'text',
  is_correct: 'is_correct',
  position: 'position',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  status: 'status',
  payment_status: 'payment_status',
  progress_percentage: 'progress_percentage',
  user_id: 'user_id',
  course_id: 'course_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProgressScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  enrollement_id: 'enrollement_id',
  lesson_id: 'lesson_id',
  score: 'score',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  user_id: 'user_id',
  course_id: 'course_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CertificatesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  enrollment_id: 'enrollment_id',
  issued_at: 'issued_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHERS: 'OTHERS'
};

exports.Status = exports.$Enums.Status = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  TEACHER: 'TEACHER',
  USER: 'USER'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.Course_status = exports.$Enums.Course_status = {
  PUBLISHED: 'PUBLISHED',
  DRAFT: 'DRAFT'
};

exports.Chapter_status = exports.$Enums.Chapter_status = {
  PUBLISHED: 'PUBLISHED',
  DRAFT: 'DRAFT'
};

exports.Lesson_type = exports.$Enums.Lesson_type = {
  VIDEO: 'VIDEO',
  DOCUMENT: 'DOCUMENT',
  QUIZ: 'QUIZ'
};

exports.lesson_status = exports.$Enums.lesson_status = {
  PUBLISHED: 'PUBLISHED',
  DRAFT: 'DRAFT'
};

exports.Answer_type = exports.$Enums.Answer_type = {
  SINGLE: 'SINGLE',
  MULTIPLE: 'MULTIPLE'
};

exports.Progress_status = exports.$Enums.Progress_status = {
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED'
};

exports.Payment_status = exports.$Enums.Payment_status = {
  PAID: 'PAID',
  UNPAID: 'UNPAID'
};

exports.Prisma.ModelName = {
  User: 'User',
  Course: 'Course',
  User_group: 'User_group',
  Category: 'Category',
  Course_to_category: 'Course_to_category',
  Chapter: 'Chapter',
  Lesson: 'Lesson',
  Quiz: 'Quiz',
  Question: 'Question',
  Option: 'Option',
  Enrollment: 'Enrollment',
  Progress: 'Progress',
  Review: 'Review',
  Certificates: 'Certificates'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
