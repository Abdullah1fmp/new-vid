generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Defines enums 

// For course difficulity 
enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// For user gender
enum Gender {
  MALE
  FEMALE
  OTHERS
}

// for user status
enum Status {
  ACTIVE
  INACTIVE
}

// for user role
enum Role {
  ADMIN
  TEACHER
  USER
}

// for course module lesson type
enum Lesson_type {
  VIDEO
  DOCUMENT
  QUIZ
}

// for course status
enum Progress_status {
  ONGOING
  COMPLETED
}

// course status 
enum Course_status {
  PUBLISHED
  DRAFT
}

// chapter status 
enum Chapter_status {
  PUBLISHED
  DRAFT
}

// chapter status 
enum lesson_status {
  PUBLISHED
  DRAFT
}

// for question answer type
enum Answer_type {
  SINGLE
  MULTIPLE
}

enum Payment_status {
  PAID
  UNPAID
}

model User {
  id            String   @id @default(uuid())
  clerk_id      String   @unique
  email         String   @unique
  first_name    String
  last_name     String
  dob           DateTime
  city          String
  state         String
  country       String
  phone_number  String
  gender        Gender
  preferences   String[]
  roles         Role[]
  status        Status   @default(ACTIVE)
  user_group_id String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relation fields
  enrollments  Enrollment[]
  progress     Progress[]
  courses      Course[]
  reviews      Review[]
  user_group   User_group?    @relation(fields: [user_group_id], references: [id])
  Certificates Certificates[]

  @@index([email])
}

model Course {
  id                      String        @id @default(uuid())
  title                   String        @unique
  description             String
  thumbnail               String
  intro_video             String?
  access_by_user_group_id String?
  price                   Float         @default(0)
  avg_rating              Float         @default(0)
  author_id               String
  difficulty              Difficulty
  status                  Course_status @default(DRAFT)
  created_at              DateTime      @default(now())
  updated_at              DateTime      @updatedAt

  // Relation fields
  chapters             Chapter[]
  enrollments          Enrollment[]
  author               User                 @relation(fields: [author_id], references: [id], onDelete: Cascade)
  reviews              Review[]
  course_to_category   Course_to_category[]
  access_by_user_group User_group?          @relation(fields: [access_by_user_group_id], references: [id], onDelete: SetNull)
}

model User_group {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relation fields
  users   User[]
  courses Course[]
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relation fields
  course_to_category Course_to_category[]
}

model Course_to_category {
  id          String   @id @default(uuid())
  course_id   String
  category_id String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relation fields
  course   Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

model Chapter {
  id          String         @id @default(uuid())
  title       String
  description String
  position    Int
  course_id   String
  status      Chapter_status @default(DRAFT)
  is_free     Boolean        @default(false)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt

  // Relation fields
  course  Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@unique([course_id, position])
}

model Lesson {
  id              String        @id @default(uuid())
  title           String
  position        Int
  type            Lesson_type
  status          lesson_status @default(DRAFT)
  chapter_id      String
  video_url       String?
  document_url    String?
  is_downloadable Boolean       @default(false)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  // Relation fields
  quiz     Quiz?
  chapter  Chapter    @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
  progress Progress[]

  @@unique([chapter_id, position])
}

model Quiz {
  id         String   @id @default(uuid())
  lesson_id  String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relation fields
  lesson    Lesson     @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  questions Question[]
}

model Question {
  id          String      @id @default(uuid())
  text        String
  position    Int
  answer_type Answer_type @default(SINGLE)
  quiz_id     String
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  // Relation fields
  quiz    Quiz     @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  options Option[]

  @@unique([quiz_id, position])
}

model Option {
  id          String   @id @default(uuid())
  question_id String
  text        String
  is_correct  Boolean
  position    Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relation fields
  question Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@unique([question_id, position])
}

model Enrollment {
  id                  String          @id @default(uuid())
  status              Progress_status @default(ONGOING)
  payment_status      Payment_status  @default(PAID)
  progress_percentage Float           @default(0)
  user_id             String
  course_id           String
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  // Relation fields
  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course       Course         @relation(fields: [course_id], references: [id], onDelete: Cascade)
  Certificates Certificates[]
  Progress     Progress[]

  @@unique([user_id, course_id])
}

model Progress {
  id             String   @id @default(uuid())
  user_id        String
  enrollement_id String?
  lesson_id      String
  score          Float    @default(100)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relation fields
  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lesson     Lesson      @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  enrollment Enrollment? @relation(fields: [enrollement_id], references: [id], onDelete: Cascade)

  @@unique([user_id, lesson_id, enrollement_id])
}

model Review {
  id         String   @id @default(uuid())
  rating     Float
  comment    String?
  user_id    String
  course_id  String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  // Relation fields
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)
}

model Certificates {
  id            String   @id @default(uuid())
  user_id       String
  enrollment_id String
  issued_at     DateTime @default(now())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relation fields
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  enrollment Enrollment @relation(fields: [enrollment_id], references: [id], onDelete: Cascade)

  @@unique([user_id, enrollment_id])
}
